package build

import (
	"archive/tar"
	"crypto/sha256"
	"io"
	"os"
	"path/filepath"
)

type NodeModulesTask struct {
	options   Options
	path      string
	lock_path string

	_inputs []Input
	_output Output
}

// build implements Task
func (nm *NodeModulesTask) Build() error {
	p := filepath.Join(os.TempDir(), "node_modules.tar")
	hash := sha256.New()

	nm._output = DiskOutput{_path: p, _hash: hash}

	file, err := os.Create(p)
	if err != nil {
		return err
	}
	defer file.Close()

	mw := io.MultiWriter(hash, file)
	tw := tar.NewWriter(mw)
	defer tw.Close()

	glob := NewGlob("**/node_modules/**", nil)

	if err := BuildTar(tw, nm.path, "", *nm.options.mtime, glob); err != nil {
		return err
	}

	return nil
}

// inputs implements Task
func (nm *NodeModulesTask) Inputs() ([]Input, error) {
	if len(nm._inputs) != 0 {
		return nm._inputs, nil
	}
	lock, err := NewDiskInput(nm.lock_path)
	if err != nil {
		return nil, err
	}
	return []Input{
		nm.options.only([]string{"mtime"}),
		lock,
	}, nil
}

// outputs implements Task
func (nm NodeModulesTask) Output() (Output, error) {
	return nm._output, nil
}

func NewNodeModulesTask(options Options, path, lock_path string) Task {
	return &NodeModulesTask{
		options:   options,
		path:      path,
		lock_path: lock_path,
	}
}
